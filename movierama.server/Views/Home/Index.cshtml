@using Microsoft.AspNetCore.Identity
@using Movierama.Server.Database
@using Movierama.Server.Models
@using Movierama.Server.Views.Home
@model IEnumerable<Movierama.Server.Models.MovieModel>
@inject SignInManager<ApplicationIdentityUser> SignInManager
@{
    ViewData["Title"] = "MovieRama";
}

@section Scripts {
    <script type="text/javascript">

        function adjustReviewButtonsVisibility(reviewOpinion, movieId) {

            document.getElementById("Hate_" + movieId.toString()).hidden = reviewOpinion != 'Neutral';
            document.getElementById("Unhate_" + movieId.toString()).hidden = reviewOpinion != 'Hate';
            document.getElementById("Hate_Description_" + movieId.toString()).hidden = reviewOpinion != 'Hate';

            document.getElementById("Like_" + movieId.toString()).hidden = reviewOpinion != 'Neutral';
            document.getElementById("Unlike_" + movieId.toString()).hidden = reviewOpinion != 'Like';
            document.getElementById("Like_Description_" + movieId.toString()).hidden = reviewOpinion != 'Like';
        }

        function uploadReviewAction(movieId, reviewAction){
            reviewOpinion = 'Neutral'
            if (reviewAction == 'Like') reviewOpinion = 'Like'
            if (reviewAction == 'Hate') reviewOpinion = 'Hate'
            
            $.ajax({
                url: '/api/review',
                headers: {
                    'Content-Type': 'application/json'
                },
                type: 'GET',
                data: { movieId: movieId, reviewAction: reviewAction },
                success: function (data, textStatus, xhr) {
                    adjustReviewButtonsVisibility(reviewOpinion, movieId);
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        }

        function showFullDescription(movieId) {
            $.ajax({
                url: '/api/movie',
                headers: {
                    'Content-Type': 'application/json'
                },
                type: 'GET',
                data: { movieId: movieId },
                success: function (data, textStatus, xhr) {
                    console.log(data);
                    alert(data)
                },
                error: function (xhr, textStatus, errorThrown) {
                    console.log(errorThrown);
                }
            });
        }

        $(document).ready(function () {

            // end of page detection
            $(window).scroll(function () {
                if ($(window).scrollTop() + $(window).height() + 10 >= $(document).height()) {
                    alert("End of page ...");
                }
            });

            // review action click
            $('.review-movie').click(function (event) {
                event.preventDefault();
                movieId = event.target.id.toString().split('_')[1];
                reviewAction = event.target.id.toString().split('_')[0];
                uploadReviewAction(movieId, reviewAction);
                return false;
            });

            // load full description click
            $('.full-description').click(function (event) {
                event.preventDefault();
                movieId = event.target.id.toString().split('_')[1];
                showFullDescription(movieId);
                return false;
            });
        });
    </script>
}

@functions{
    public string HiddenAttributeFor(string element, ReviewOpinion opinion)
    {
        bool shouldBeHidden = false;

        switch (element)
        {
            case "Hate":
            case "Like":
                shouldBeHidden = opinion != ReviewOpinion.Neutral;
                break;

            case "Unhate":
            case "Hate_Description":
                shouldBeHidden = opinion != ReviewOpinion.Hate;
                break;

            case "Unlike":
            case "Like_Description":
                shouldBeHidden = opinion != ReviewOpinion.Like;
                break;
        }

        if (shouldBeHidden)
            return "hidden";

        return string.Empty;
    }
}

<div class="row">
    <div class="col-md-9">

        <!-- Filter Commands Bar -->
        <div class="d-flex alert alert-primary" role="alert">
            <div>Sort by :</div>
            <div>&nbsp</div>
            <div>&nbsp</div>
            <div id="SortByPublicationDate">
                @Html.ActionLink("Publication Date", "Index", new { sortType = @SortType.PublicationDate.ToString(), ownerId = ViewBag.OwnerId })
            </div>
            <div>&nbsp</div>
            <div>|</div>
            <div>&nbsp</div>
            <div id="SortByLikes">
                @Html.ActionLink("Likes", "Index", new { sortType = @SortType.Likes.ToString(), ownerId = ViewBag.OwnerId })
            </div>
            <div>&nbsp</div>
            <div>|</div>
            <div>&nbsp</div>
            <div id="SortByHates">
                @Html.ActionLink("Hates", "Index", new { sortType = @SortType.Hates.ToString(), ownerId = ViewBag.OwnerId })
            </div>
            <div>&nbsp</div>
            <div>|</div>
            <div>&nbsp</div>
        </div>
        <!-- Movies-->
        @foreach (var movieViewModel in Model)
        {
            <div class="card">
                <div class="card-body">
                    <h5 class="card-title">@movieViewModel.Title</h5>

                    <p class="card-text">Posted by: @Html.ActionLink(movieViewModel.OwnerFullName, "Index", new { sortType = ViewBag.SortType, ownerId = movieViewModel.OwnerId }) @movieViewModel.PublicationDuration @movieViewModel.UnitOfPulicationDuration ago</p>

                    <p class="card-text">@movieViewModel.Description</p>

                    <div class="d-flex">
                        <div><h7 class="flex-grow-1">@movieViewModel.LikeCount Likes</h7></div>
                        <div>&nbsp</div>
                        <div>&nbsp</div>
                        <div><h7 class="flex-grow-1">@movieViewModel.HateCount Hates</h7></div>
                        <div>&nbsp</div>
                        <div>&nbsp</div>

                        @if (@movieViewModel.HasFullDescription)
                        {
                            <div>
                                <h7>
                                    <a id="FullDescription_@movieViewModel.Id" href="#FullDescription" class="full-description">Load Full Description</a>
                                </h7>
                            </div>
                        }

                        @if (SignInManager.IsSignedIn(User) && @movieViewModel.CanReview)
                        {
                            <div>
                                <h7>
                                    <a @this.HiddenAttributeFor("Like", @movieViewModel.ReviewOpinion) 
                                       id="Like_@movieViewModel.Id" class="review-movie" href="#Like">Like</a>
                                </h7>
                            </div>

                            <div>
                                <h7>
                                    <a @this.HiddenAttributeFor("Unlike", @movieViewModel.ReviewOpinion) 
                                       id="Unlike_@movieViewModel.Id" class="review-movie mr-auto" href="#Like">Unlike</a>
                                </h7>
                            </div>

                            <div @this.HiddenAttributeFor("Like_Description", @movieViewModel.ReviewOpinion)
                                 id="Like_Description_@movieViewModel.Id" class="mr-auto"><p>&nbsp|&nbspYou like this movie ...</p></div>

                            <div>&nbsp</div>
                            <div>&nbsp</div>

                            <div>
                                <h7>
                                    <a @this.HiddenAttributeFor("Hate", @movieViewModel.ReviewOpinion) 
                                       id="Hate_@movieViewModel.Id" class="review-movie" href="#Hate">Hate</a>
                                </h7>
                            </div>

                            <div>
                                <h7>
                                    <a @this.HiddenAttributeFor("Unhate", @movieViewModel.ReviewOpinion) 
                                       id="Unhate_@movieViewModel.Id" class="review-movie mr-auto" href="#Hate">Unhate</a>
                                </h7>
                            </div>

                            <div @this.HiddenAttributeFor("Hate_Description", @movieViewModel.ReviewOpinion)
                                 id="Hate_Description_@movieViewModel.Id" class="mr-auto"><p>&nbsp|&nbspYou hate this movie ...</p></div>
                        }
                    </div>
                </div>
            </div>
        }

    </div>
    <div class="col-md-3">
        @if (SignInManager.IsSignedIn(User))
        {
            <p>
                <a class="btn btn-success" asp-action="Create">New Movie</a>
            </p>
        }
    </div>
</div>
